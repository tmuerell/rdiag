---
name: Release

on:
  push:
    branches:
      - main
      - next
      - next-major
      - beta
      - alpha
      - "[0-9]+.[0-9]+.x"
      - "[0-9]+.x"

# Only allow one release workflow to execute at a time, since each release
# workflow uses shared resources (git tags, package registries)
concurrency:
  group: ${{ github.workflow }}

env:
  APP_NAME: rdiag
  DEBUG: napi:*
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Cargo test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      # One test is ignored because it requires network access, which
      # complicates building with the Nix flake.
      - name: Cargo test
        run: cargo test -- --include-ignored

  # Compile native CLI binary
  build-cli:
    name: Build CLI ${{ matrix.build.target }}
    runs-on: ${{ matrix.build.os }}
    env:
      CARGO: cargo

    strategy:
      matrix:
        build:
          # alphabatized by target
          - os: macOS-latest
            target: aarch64-apple-darwin
            cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
            cross: true
          - os: macOS-latest
            target: x86_64-apple-darwin
            cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
            suffix: ".exe"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build inputs
        if: runner.os == 'Linux' && !matrix.build.cross
        run: sudo apt install musl-tools

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable
          target: ${{ matrix.build.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Configure cross
        if: matrix.build.cross
        run: echo "CARGO=cross" >> "$GITHUB_ENV"

      - name: Compile release binary
        run: ${{ env.CARGO }} build --bin rdiag --release --target ${{ matrix.build.target }} --verbose

      - name: Create release archive
        run: |
          mkdir dist
          cp target/${{ matrix.build.target }}/release/rdiag${{ matrix.build.suffix }} dist/rdiag-${{ matrix.build.target }}

      - name: Create binary checksum
        run: shasum --algorithm 256 --binary rdiag-${{ matrix.build.target }} | tee rdiag-${{ matrix.build.target }}-SHA256SUM.txt
        working-directory: ./dist

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build.target }}
          path: |
            dist/rdiag-${{ matrix.build.target }}
            dist/rdiag-${{ matrix.build.target }}-SHA256SUM.txt
          if-no-files-found: error
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    name: Release
    needs:
      - build-cli
      - test

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags for calculating next semantic version
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: ls artifacts
        run: ls -R ./artifacts

      - name: Prepare GitHub Release artifacts
        run: |
          mkdir dist/
          mv artifacts/aarch64-apple-darwin dist/
          mv artifacts/aarch64-unknown-linux-gnu dist/
          mv artifacts/aarch64-unknown-linux-musl dist/
          mv artifacts/i686-unknown-linux-gnu dist/
          mv artifacts/i686-unknown-linux-musl dist/
          mv artifacts/x86_64-apple-darwin dist/
          mv artifacts/x86_64-unknown-linux-gnu dist/
          mv artifacts/x86_64-unknown-linux-musl dist/

      - name: Combine checksums
        run: cat dist/**/rdiag-*-SHA256SUM.txt | tee dist/SHA256SUMS.txt